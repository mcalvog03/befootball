/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Interfaces;

import POJOS.Equipos;
import POJOS.Ligas;
import POJOS.Partidos;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import org.hibernate.cfg.Configuration;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

public class CrearPartido extends javax.swing.JDialog {

    private SessionFactory factory;

    /**
     * Creates new form CrearPartido
     */
    public CrearPartido(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        Image icon = Toolkit.getDefaultToolkit().getImage("src/main/resources/images/logo.png");
        setIconImage(icon);
        initializeSessionFactory();
        rellenarCombox();

        // Listener para actualizar la lista de equipos dependiendo de la liga seleccionada
        ligasComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                actualizarEquiposEnJList();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ligasComboBox = new javax.swing.JComboBox<>();
        fechaSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jornadaSpinner = new javax.swing.JSpinner();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        equposLocalesjList = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        equiposVisitantesjList = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        crearPartidoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear partido");
        setResizable(false);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Liga");

        ligasComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        fechaSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(), null, java.util.Calendar.DAY_OF_MONTH));

        jLabel2.setText("Fecha");

        jLabel3.setText("Jornada");

        jornadaSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ligasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fechaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jornadaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jornadaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(ligasComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fechaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Equipo local", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 0, 12))); // NOI18N
        jPanel2.setMinimumSize(new java.awt.Dimension(290, 176));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(262, 134));

        jScrollPane1.setViewportView(equposLocalesjList);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Equipo visitante", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 0, 12))); // NOI18N
        jPanel3.setMinimumSize(new java.awt.Dimension(290, 176));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setMinimumSize(new java.awt.Dimension(262, 134));

        jScrollPane2.setViewportView(equiposVisitantesjList);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        crearPartidoButton.setText("Crear partido");
        crearPartidoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearPartidoButtonActionPerformed(evt);
            }
        });
        jPanel4.add(crearPartidoButton, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crearPartidoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearPartidoButtonActionPerformed
        // TODO add your handling code here:
        crearPartido();
    }//GEN-LAST:event_crearPartidoButtonActionPerformed

    // Crear factorty
    private void initializeSessionFactory() {
        factory = new Configuration().configure().buildSessionFactory();
    }

    // Obtener ligas para el combobox
    public List<String> obtenerLigas() {
        List<String> nombresLigas = new ArrayList<>();
        Transaction tx = null;

        try (Session session = factory.openSession()) {
            tx = session.beginTransaction();

            // Obtener nombres de ligas de la base de datos
            List<Ligas> ligasList = session.createQuery("FROM Ligas", Ligas.class).getResultList();
            
            // Agregar los nombres de las ligas en una lista
            for (Ligas liga : ligasList) {
                nombresLigas.add(liga.getNombreLiga());
            }

            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            JOptionPane.showMessageDialog(this, "Error al obtener las ligas: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        return nombresLigas;
    }

    // Rellenar el comboBox de ligas con la lista de los nombres obtenidos
    public void rellenarCombox() {
        List<String> nombresLigas = obtenerLigas();
        // Llenar el JComboBox con los nombres de las ligas
        for (String nombre : nombresLigas) {
            ligasComboBox.addItem(nombre);  // Agregar cada nombre de liga al JComboBox
        }
    }

    // Obtener los equipos
    public List<String> obtenerEquiposDeLiga(Ligas liga) {
    List<String> nombresEquipos = new ArrayList<>();
    Transaction tx = null;
    
    try (Session session = factory.openSession()) {
        tx = session.beginTransaction();
        
        // Obtener nombres de los equipos dependiendo de la liga seleccionada en el comboBox
        List<Equipos> equiposList = session.createQuery("FROM Equipos e WHERE e.liga = :liga", Equipos.class)
                .setParameter("liga", liga)
                .getResultList();
        
        // Agregar los nombres a una lista
        for (Equipos equipo : equiposList) {
            nombresEquipos.add(equipo.getNombreEquipo());
        }
        
        tx.commit();
    } catch (Exception e) {
        if (tx != null) tx.rollback();
        JOptionPane.showMessageDialog(this, "Error al obtener equipos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    return nombresEquipos;
}

    // Método que se llama cuando se selecciona una liga
    public void actualizarEquiposEnJList() {
        // Obtener la liga seleccionada del ComboBox
        String nombreLigaSeleccionada = (String) ligasComboBox.getSelectedItem();

        // Obtener la liga correspondiente desde la base de datos
        Session session = factory.openSession();
        Ligas ligaSeleccionada = session.createQuery("FROM Ligas l WHERE l.nombreLiga = :nombre", Ligas.class)
                .setParameter("nombre", nombreLigaSeleccionada)
                .uniqueResult();
        session.close();

        // Obtener los equipos de la liga seleccionada
        List<String> nombresEquipos = obtenerEquiposDeLiga(ligaSeleccionada);

        // Actualizar el JList con los nombres de los equipos
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String equipo : nombresEquipos) {
            listModel.addElement(equipo);
        }
        equposLocalesjList.setModel(listModel);
        equiposVisitantesjList.setModel(listModel);
    }

    // Obtener la liga seleccionada en el comboBox
    public Ligas obtenerLigaSeleccionada() {
    Ligas liga = null;
    Transaction tx = null;
    
    try (Session session = factory.openSession()) {
        tx = session.beginTransaction();
        
        // Obtener nombre de la liga seleccionada del comboBox
        String nombreLiga = (String) ligasComboBox.getSelectedItem();
        liga = session.createQuery("FROM Ligas l WHERE l.nombreLiga = :nombre", Ligas.class)
                .setParameter("nombre", nombreLiga)
                .uniqueResult();
        
        tx.commit();
    } catch (Exception e) {
        if (tx != null) tx.rollback();
        JOptionPane.showMessageDialog(this, "Error al obtener la liga seleccionada: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    return liga;
}

    // Obtener los equipos seleccionados
    public Equipos obtenerEquipoSeleccionado(JList<String> jListEquipos) {
    Equipos equipo = null;
    Transaction tx = null;
    
    try (Session session = factory.openSession()) {
        tx = session.beginTransaction();
        
        // Obtener equipo seleccionado de un jList
        String nombreEquipo = jListEquipos.getSelectedValue();
        // Seleccionar el equipo
        if (nombreEquipo != null) {
            equipo = session.createQuery("FROM Equipos e WHERE e.nombreEquipo = :nombre", Equipos.class)
                    .setParameter("nombre", nombreEquipo)
                    .uniqueResult();
        }
        
        tx.commit();
    } catch (Exception e) {
        if (tx != null) tx.rollback();
        JOptionPane.showMessageDialog(this, "Error al obtener el equipo seleccionado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    return equipo;
}

    // Crear el partido en la base de datos
    public void crearPartido() {
    // Llamar al método para obtener la liga
    Ligas ligaSeleccionada = obtenerLigaSeleccionada();
    // Obtener los equipos del partido
    Equipos equipoLocal = obtenerEquipoSeleccionado(equposLocalesjList);
    Equipos equipoVisitante = obtenerEquipoSeleccionado(equiposVisitantesjList);

    // Comprobar que se hayan seleccionado equipos y ligas
    if (ligaSeleccionada == null || equipoLocal == null || equipoVisitante == null) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar una liga y dos equipos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Comprobar que los equipos seleccionados no sean los mismos
    if (equipoLocal.getPkEquipo() == equipoVisitante.getPkEquipo()) {
        JOptionPane.showMessageDialog(this, "El equipo local y visitante no pueden ser el mismo.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener la fecha y hora del spinner
    Date date = (Date) fechaSpinner.getValue();
    Instant instant = date.toInstant();
    LocalDateTime fechaPartido = instant.atZone(ZoneId.systemDefault()).toLocalDateTime();
    
    // Obtener el número de la jornada del spinner
    int jornada = (int) jornadaSpinner.getValue();

    // Crear un objeto de partidos
    Partidos nuevoPartido = new Partidos();
    
    // Establecer los datos del objeto partido para agregarlos a la base de datos mediante una transacción
    nuevoPartido.setEquipoLocal(equipoLocal);
    nuevoPartido.setEquipoVisitante(equipoVisitante);
    nuevoPartido.setFecha(fechaPartido);
    nuevoPartido.setJornada(jornada);
    nuevoPartido.setLiga(ligaSeleccionada);
    nuevoPartido.setGolesLocal(0);
    nuevoPartido.setGolesVisitante(0);
    nuevoPartido.setEstado("no iniciado");

    Transaction tx = null;
    
    // Ejecutar transacción
    try (Session session = factory.openSession()) {
        tx = session.beginTransaction();
        
        session.persist(nuevoPartido);
        
        tx.commit();
        JOptionPane.showMessageDialog(this, "Partido creado con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        if (tx != null) tx.rollback();
        JOptionPane.showMessageDialog(this, "Error al crear el partido: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    // Cerrar flujos factorty
    public void closeSessionFactory() {
        if (factory != null) {
            factory.close();
        }
    }

    // Cerrar flujos en caso de que se cierre la ventana
    @Override
    public void dispose() {
        closeSessionFactory();
        super.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearPartido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearPartido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearPartido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearPartido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CrearPartido dialog = new CrearPartido(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton crearPartidoButton;
    private javax.swing.JList<String> equiposVisitantesjList;
    private javax.swing.JList<String> equposLocalesjList;
    private javax.swing.JSpinner fechaSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jornadaSpinner;
    private javax.swing.JComboBox<String> ligasComboBox;
    // End of variables declaration//GEN-END:variables
}
