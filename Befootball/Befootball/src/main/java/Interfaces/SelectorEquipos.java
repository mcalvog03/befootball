/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Interfaces;

import Funcionalidades.LogManagerApp;
import FuncionalidadesHibernate.ObtenerSubirDatos;
import POJOS.Equipos;
import POJOS.Ligas;
import POJOS.Usuarios;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class SelectorEquipos extends javax.swing.JDialog {

    private static final Logger logger = LogManagerApp.getLogger();
    private SessionFactory factory;
    private ObtenerSubirDatos obtenerDatos;
    private int pkUsuario;

    /**
     * Creates new form SelectorEquipos
     */
    public SelectorEquipos(java.awt.Frame parent, boolean modal, int pkUsuario) {
        super(parent, modal);
        this.pkUsuario = pkUsuario;
        initComponents();
        setLocationRelativeTo(null);
        Image icon = Toolkit.getDefaultToolkit().getImage("src/main/resources/images/logo.png");
        setIconImage(icon);
        initializeSessionFactory();
        obtenerDatos = new ObtenerSubirDatos(factory);
        rellenarCombox();
        // Listener para actualizar la lista de equipos dependiendo de la liga seleccionada
        ligasComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                actualizarEquiposEnJList();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ligasComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        equiposList = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        seleccionarEquipoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleccionar equipo favorito");
        setMinimumSize(new java.awt.Dimension(520, 300));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(new java.awt.BorderLayout());

        ligasComboBox.setForeground(new java.awt.Color(255, 255, 255));
        ligasComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        jPanel1.add(ligasComboBox, java.awt.BorderLayout.PAGE_START);

        equiposList.setBackground(new java.awt.Color(102, 102, 102));
        equiposList.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(equiposList);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new java.awt.BorderLayout());

        seleccionarEquipoButton.setBackground(new java.awt.Color(51, 255, 0));
        seleccionarEquipoButton.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        seleccionarEquipoButton.setText("Seleccionar");
        seleccionarEquipoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarEquipoButtonActionPerformed(evt);
            }
        });
        jPanel2.add(seleccionarEquipoButton, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seleccionarEquipoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarEquipoButtonActionPerformed
        // TODO add your handling code here:
        seleccionarEquipoFav(pkUsuario);
        dispose();
    }//GEN-LAST:event_seleccionarEquipoButtonActionPerformed

    // Crear factorty
    private void initializeSessionFactory() {
        try {
            factory = new Configuration().configure().buildSessionFactory();
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error: {0}", e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al inicializar Hibernate: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Rellenar el combox de ligas con los datos obtenidos mediante el objeto obtener datos
    public void rellenarCombox() {
        // Obtener las jornadas de la liga seleccionada
        List<String> nombresLigas = obtenerDatos.obtenerLigas();
        // Llenar el JComboBox con los nombres de las ligas
        for (String nombre : nombresLigas) {
            ligasComboBox.addItem(nombre);
        }
    }

    // MÃ©todo que se llama cuando se selecciona una liga
    public void actualizarEquiposEnJList() {
        // Obtener la liga seleccionada del ComboBox
        String nombreLigaSeleccionada = (String) ligasComboBox.getSelectedItem();

        // Obtener la liga correspondiente desde la base de datos
        Session session = factory.openSession();
        Ligas ligaSeleccionada = session.createQuery("FROM Ligas l WHERE l.nombreLiga = :nombre", Ligas.class)
                .setParameter("nombre", nombreLigaSeleccionada)
                .uniqueResult();
        session.close();

        // Obtener los equipos de la liga seleccionada
        List<String> nombresEquipos = obtenerDatos.obtenerEquiposDeLiga(ligaSeleccionada);

        // Actualizar el JList con los nombres de los equipos
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String equipo : nombresEquipos) {
            listModel.addElement(equipo);
        }
        equiposList.setModel(listModel);
    }

    // Obtener la liga seleccionada en el comboBox
    public Ligas obtenerLigaSeleccionada() {
        Ligas liga = null;
        Transaction tx = null;

        try (Session session = factory.openSession()) {
            tx = session.beginTransaction();

            // Obtener nombre de la liga seleccionada del comboBox
            String nombreLiga = (String) ligasComboBox.getSelectedItem();
            liga = session.createQuery("FROM Ligas l WHERE l.nombreLiga = :nombre", Ligas.class)
                    .setParameter("nombre", nombreLiga)
                    .uniqueResult();

            tx.commit();
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error: {0}", e.getMessage());
            if (tx != null) {
                tx.rollback();
            }
            JOptionPane.showMessageDialog(this, "Error al obtener la liga seleccionada: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.err.println("Error al obtener la liga seleccionada: " + e.getMessage());
        }

        return liga;
    }
    
    // Obtener los equipo seleccionado
    public Equipos obtenerEquipoSeleccionado(JList<String> jListEquipos) {
        Equipos equipo = null;
        Transaction tx = null;

        try (Session session = factory.openSession()) {
            tx = session.beginTransaction();

            // Obtener equipo seleccionado de un jList
            String nombreEquipo = jListEquipos.getSelectedValue();
            // Seleccionar el equipo
            if (nombreEquipo != null) {
                equipo = session.createQuery("FROM Equipos e WHERE e.nombreEquipo = :nombre", Equipos.class)
                        .setParameter("nombre", nombreEquipo)
                        .uniqueResult();
            }

            tx.commit();
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error: {0}", e.getMessage());
            if (tx != null) {
                tx.rollback();
            }
            JOptionPane.showMessageDialog(this, "Error al obtener el equipo seleccionado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.err.println("Error al obtener las ligas: " + e.getMessage());
        }

        return equipo;
    }

    // Metodo para seleccionar el equipo favorito del usuario
    public void seleccionarEquipoFav(int pkUsuario) {
        Transaction tx = null;
        try (Session session = factory.openSession()) {
            tx = session.beginTransaction();

            // Obtener el usuario por id
            Usuarios usuario = session.find(Usuarios.class, pkUsuario);

            if (usuario != null) {
                // Establecer el equipo seleccionado en el Jlist
                usuario.setEquipoFavorito(obtenerEquipoSeleccionado(equiposList));

                // Guardar los cambios en la base de datos
                session.persist(usuario);

                tx.commit();
            } else {
                System.out.println("Usuario no encontrado con ID: " + pkUsuario);
            }
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error: {0}", e.getMessage());
            if (tx != null) {
                tx.rollback();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectorEquipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectorEquipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectorEquipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectorEquipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SelectorEquipos dialog = new SelectorEquipos(new javax.swing.JFrame(), true, 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> equiposList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> ligasComboBox;
    private javax.swing.JButton seleccionarEquipoButton;
    // End of variables declaration//GEN-END:variables
}
